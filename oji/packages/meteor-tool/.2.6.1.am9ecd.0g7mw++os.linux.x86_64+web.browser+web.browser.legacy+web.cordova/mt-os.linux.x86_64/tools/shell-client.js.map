{"version":3,"file":"tools/shell-client.js.map","mappings":"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","names":["module","default","_defineProperty","export","connect","fs","path","net","isEmacs","eachline","chalk","require","EOL","EXITING_MESSAGE","getInfoFile","shellDir","join","Client","constructor","reconnect","delay","reconnectCount","console","error","yellow","reconnectTimer","setTimeout","infoFile","readFile","err","json","info","JSON","parse","status","firstTimeConnecting","reason","process","exit","setUpSocket","port","key","setUpSocketForSingleUse","sock","on","inputBuffers","stdin","buffer","push","write","stringify","evaluateAndExit","command","Buffer","concat","toString","terminal","outputBuffers","output","code","stdout","result","isTTY","resume","onConnect","connected","columns","stderr","shellBanner","pipe","setRawMode","onClose","tearDown","exitOnClose","onError","unpipe","removeListener","end","line","indexOf","undefined","bannerLines","green"],"sourceRoot":"","sources":["tools/shell-client.ts"],"sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as net from \"net\";\nimport { isEmacs } from \"./utils/utils\";\nimport { eachline } from \"./utils/eachline\";\n\nconst chalk = require(\"chalk\");\nconst EOL = require(\"os\").EOL;\n\n// These two values (EXITING_MESSAGE and getInfoFile) must match the\n// values used by the shell-server package.\nconst EXITING_MESSAGE = \"Shell exiting...\";\n\nfunction getInfoFile(shellDir: string): string {\n  return path.join(shellDir, \"info.json\");\n}\n\n// Invoked by the process running `meteor shell` to attempt to connect to\n// the server via the socket file.\nexport function connect(shellDir: string) {\n  new Client(shellDir).connect();\n}\n\nclass Client {\n  public connected = false;\n\n  private exitOnClose = false;\n  private firstTimeConnecting = true;\n  private reconnectCount = 0;\n  private reconnectTimer?: NodeJS.Timeout;\n\n  constructor(public shellDir: string) {}\n\n  reconnect(delay: number = 100) {\n    // Display the \"Server unavailable\" warning only on the third attempt\n    // to reconnect, so it doesn't get shown for successful reconnects.\n    if (++this.reconnectCount === 3) {\n      console.error(chalk.yellow(\n        \"Server unavailable (waiting to reconnect)\"\n      ));\n    }\n\n    if (!this.reconnectTimer) {\n      this.reconnectTimer = setTimeout(() => {\n        delete this.reconnectTimer;\n        this.connect();\n      }, delay);\n    }\n  };\n\n  connect() {\n    const infoFile = getInfoFile(this.shellDir);\n\n    fs.readFile(infoFile, \"utf8\", (err, json) => {\n      if (err) {\n        return this.reconnect();\n      }\n\n      let info;\n      try {\n        info = JSON.parse(json);\n      } catch (err) {\n        return this.reconnect();\n      }\n\n      if (info.status !== \"enabled\") {\n        if (this.firstTimeConnecting) {\n          return this.reconnect();\n        }\n\n        if (info.reason) {\n          console.error(info.reason);\n        }\n\n        console.error(EXITING_MESSAGE);\n        process.exit(0);\n      }\n\n      this.setUpSocket(\n        net.connect(info.port, \"127.0.0.1\"),\n        info.key\n      );\n    });\n  };\n\n  setUpSocketForSingleUse(sock: net.Socket, key: string) {\n    sock.on(\"connect\", function () {\n      const inputBuffers: Buffer[] = [];\n      process.stdin.on(\"data\", buffer => inputBuffers.push(buffer));\n      process.stdin.on(\"end\", () => {\n        sock.write(JSON.stringify({\n          evaluateAndExit: {\n            // Make sure the entire command is written as a string within a\n            // JSON object, so that the server can easily tell when it has\n            // received the whole command.\n            command: Buffer.concat(inputBuffers).toString(\"utf8\")\n          },\n          terminal: false,\n          key: key\n        }) + \"\\n\");\n      });\n    });\n\n    const outputBuffers: Buffer[] = [];\n    sock.on(\"data\", buffer => outputBuffers.push(buffer));\n    sock.on(\"close\", function () {\n      const output = JSON.parse(Buffer.concat(outputBuffers));\n      if (output.error) {\n        console.error(output.error);\n        process.exit(output.code);\n      } else {\n        process.stdout.write(JSON.stringify(output.result) + \"\\n\");\n        process.exit(0);\n      }\n    });\n  };\n\n  setUpSocket(sock: net.Socket, key: string) {\n    if (!process.stdin.isTTY) {\n      return this.setUpSocketForSingleUse(sock, key);\n    }\n\n    // Put STDIN into \"flowing mode\":\n    // http://nodejs.org/api/stream.html#stream_compatibility_with_older_node_versions\n    process.stdin.resume();\n\n    const onConnect = () => {\n      this.firstTimeConnecting = false;\n      this.reconnectCount = 0;\n      this.connected = true;\n\n      // Sending a JSON-stringified options object (even just an empty\n      // object) over the socket is required to start the REPL session.\n      sock.write(JSON.stringify({\n        columns: process.stdout.columns,\n        terminal: !isEmacs(),\n        key: key\n      }) + \"\\n\");\n\n      process.stderr.write(shellBanner());\n      process.stdin.pipe(sock);\n      if (process.stdin.setRawMode) { // https://github.com/joyent/node/issues/8204\n        process.stdin.setRawMode(true);\n      }\n    }\n\n    const onClose = () => {\n      tearDown();\n\n      // If we received the special EXITING_MESSAGE just before the socket\n      // closed, then exit the shell instead of reconnecting.\n      if (this.exitOnClose) {\n        process.exit(0);\n      } else {\n        this.reconnect();\n      }\n    }\n\n    const onError = () => {\n      tearDown();\n      this.reconnect();\n    }\n\n    const tearDown = () => {\n      this.connected = false;\n\n      if (process.stdin.setRawMode) { // https://github.com/joyent/node/issues/8204\n        process.stdin.setRawMode(false);\n      }\n\n      process.stdin.unpipe(sock);\n      sock.unpipe(process.stdout);\n      sock.removeListener(\"connect\", onConnect);\n      sock.removeListener(\"close\", onClose);\n      sock.removeListener(\"error\", onError);\n      sock.end();\n    }\n\n    sock.pipe(process.stdout);\n\n    eachline(sock, (line: string) => {\n      this.exitOnClose = line.indexOf(EXITING_MESSAGE) >= 0;\n      return undefined as unknown as string;\n    });\n\n    sock.on(\"connect\", onConnect);\n    sock.on(\"close\", onClose);\n    sock.on(\"error\", onError);\n  };\n}\n\n\n\nfunction shellBanner(): string {\n  const bannerLines = [\n    \"\",\n    \"Welcome to the server-side interactive shell!\"\n  ];\n\n  if (!isEmacs()) {\n    // Tab completion sadly does not work in Emacs.\n    bannerLines.push(\n      \"\",\n      \"Tab completion is enabled for global variables.\"\n    );\n  }\n\n  bannerLines.push(\n    \"\",\n    \"Type .reload to restart the server and the shell.\",\n    \"Type .exit to disconnect from the server and leave the shell.\",\n    \"Type .help for additional help.\",\n    EOL\n  );\n\n  return chalk.green(bannerLines.join(EOL));\n}\n"]}