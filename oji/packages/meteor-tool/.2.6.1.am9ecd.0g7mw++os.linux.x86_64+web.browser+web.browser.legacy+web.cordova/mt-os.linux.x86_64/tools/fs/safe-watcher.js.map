{"version":3,"file":"tools/fs/safe-watcher.js.map","mappings":"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","names":["module","export","closeAllWatchers","watch","addWatchRoot","Profile","statOrNull","convertToOSPath","watchFile","unwatchFile","toPosixPath","pathRelative","join","nativeJoin","default","nsfw","pathwatcher","require","PRIORITIZE_CHANGED","process","env","METEOR_WATCH_PRIORITIZE_CHANGED","JSON","parse","DEFAULT_POLLING_INTERVAL","METEOR_WATCH_POLLING_INTERVAL_MS","NO_WATCHER_POLLING_INTERVAL","WATCHER_CLEANUP_DELAY_MS","watcherLibrary","METEOR_WATCHER_LIBRARY","platform","DEDUPLICATE_BY_INO","watcherEnabled","METEOR_WATCH_FORCE_POLLING","entriesByIno","Map","entries","Object","create","watchRoots","Set","changedPaths","hasPriority","absPath","has","acquireWatcher","callback","entry","startNewWatcher","rewatch","callbacks","add","stat","ino","get","safeUnwatch","watcher","close","delete","lastWatcherEventTime","Date","now","watcherCleanupTimer","getPollingInterval","fire","event","forEach","cb","watchWrapper","watchLibraryWatch","statWatch","watchFileWrapper","newStat","oldStat","mtime","release","size","clearTimeout","setTimeout","_fire","set","keys","statWatchers","interval","statWatcher","changeListeners","includes","push","persistent","listener","on","e","maybeSuggestRaisingWatchLimit","suggestedRaisingWatchLimit","error","constants","archinfo","errno","ENOSPC","matches","host","Console","isHeadless","arrowWarn","url","fireNames","actions","CREATED","MODIFIED","DELETED","path","relativePath","startsWith","events","action","RENAMED","oldPath","directory","oldFile","oldEntry","newDirectory","newFile","newEntry","file","then","start"],"sourceRoot":"","sources":["tools/fs/safe-watcher.ts"],"sourcesContent":["import { FSWatcher, Stats, BigIntStats } from \"fs\";\nimport { Profile } from \"../tool-env/profile\";\nimport {\n  statOrNull,\n  convertToOSPath,\n  watchFile,\n  unwatchFile,\n  toPosixPath,\n  pathRelative\n} from \"./files\";\nimport {\n  join as nativeJoin\n} from 'path';\nimport nsfw from 'vscode-nsfw';\n\nconst pathwatcher = require('pathwatcher');\n\n// Default to prioritizing changed files, but disable that behavior (and\n// thus prioritize all files equally) if METEOR_WATCH_PRIORITIZE_CHANGED\n// is explicitly set to a string that parses to a falsy value.\nvar PRIORITIZE_CHANGED = true;\nif (process.env.METEOR_WATCH_PRIORITIZE_CHANGED &&\n    ! JSON.parse(process.env.METEOR_WATCH_PRIORITIZE_CHANGED)) {\n  PRIORITIZE_CHANGED = false;\n}\n\nvar DEFAULT_POLLING_INTERVAL =\n  +(process.env.METEOR_WATCH_POLLING_INTERVAL_MS || 5000);\n\nvar NO_WATCHER_POLLING_INTERVAL =\n  +(process.env.METEOR_WATCH_POLLING_INTERVAL_MS || 500);\n\n// This may seems like a long time to wait before actually closing the\n// file watchers, but it's to our advantage if they survive restarts.\nconst WATCHER_CLEANUP_DELAY_MS = 30000;\n\n// Since linux doesn't have recursive file watching, nsfw has to walk the\n// watched folder and create a separate watcher for each subfolder. Until it has a\n// way for us to filter which folders it walks we will continue to use\n// pathwatcher to avoid having too many watchers.\nlet watcherLibrary = process.env.METEOR_WATCHER_LIBRARY || \n  (process.platform === 'linux' ? 'pathwatcher' : 'nsfw');\n\n// Pathwatcher complains (using console.error, ugh) if you try to watch\n// two files with the same stat.ino number but different paths on linux, so we have\n// to deduplicate files by ino.\nconst DEDUPLICATE_BY_INO = watcherLibrary === 'pathwatcher';\n// Set METEOR_WATCH_FORCE_POLLING environment variable to a truthy value to\n// force the use of files.watchFile instead of watchLibrary.watch.\nlet watcherEnabled = ! JSON.parse(\n  process.env.METEOR_WATCH_FORCE_POLLING || \"false\"\n);\n\nconst entriesByIno = new Map;\n\nexport type SafeWatcher = {\n  close: () => void;\n}\n\ntype EntryCallback = (event: string) => void;\n\ninterface Entry extends SafeWatcher {\n  callbacks: Set<EntryCallback>;\n  rewatch: () => void;\n  release: (callback: EntryCallback) => void;\n  _fire: (event: string) => void;\n}\n\nconst entries: Record<string, Entry | null> = Object.create(null);\n\n// Folders that are watched recursively\nlet watchRoots = new Set<string>();\n\n// Set of paths for which a change event has been fired, watched with\n// watchLibrary.watch if available. This could be an LRU cache, but in\n// practice it should never grow large enough for that to matter.\nconst changedPaths = new Set;\n\nfunction hasPriority(absPath: string) {\n  // If we're not prioritizing changed files, then all files have\n  // priority, which means they should be watched with native file\n  // watchers if the platform supports them. If we are prioritizing\n  // changed files, then only changed files get priority.\n  return PRIORITIZE_CHANGED\n    ? changedPaths.has(absPath)\n    : true;\n}\n\nfunction acquireWatcher(absPath: string, callback: EntryCallback) {\n  const entry = entries[absPath] || (\n    entries[absPath] = startNewWatcher(absPath));\n\n  // Watches successfully established in the past may have become invalid\n  // because the watched file was deleted or renamed, so we need to make\n  // sure we're still watching every time we call safeWatcher.watch.\n  entry.rewatch();\n\n  // The size of the entry.callbacks Set also serves as a reference count\n  // for this watcher.\n  entry.callbacks.add(callback);\n\n  return entry;\n}\n\nfunction startNewWatcher(absPath: string): Entry {\n  let stat: Stats | BigIntStats | null | undefined = null;\n\n  if (DEDUPLICATE_BY_INO) {\n    stat = statOrNull(absPath);\n    if (stat && stat.ino > 0 && entriesByIno.has(stat.ino)) {\n      const entry = entriesByIno.get(stat.ino);\n      if (entries[absPath] === entry) {\n        return entry;\n      }\n    }\n  } else {\n    let entry = entries[absPath];\n    if (entry) {\n      return entry;\n    }\n  }\n\n  function safeUnwatch() {\n    if (watcher) {\n      watcher.close();\n      watcher = null;\n      if (stat && stat.ino > 0) {\n        entriesByIno.delete(stat.ino);\n      }\n    }\n  }\n\n  let lastWatcherEventTime = Date.now();\n  const callbacks = new Set<EntryCallback>();\n  let watcherCleanupTimer: ReturnType<typeof setTimeout> | null = null;\n  let watcher: FSWatcher | null = null;\n\n  // Determines the polling interval to be used for the fs.watchFile-based\n  // safety net that works on all platforms and file systems.\n  function getPollingInterval() {\n    if (hasPriority(absPath)) {\n      // Regardless of whether we have a native file watcher and it works\n      // correctly on this file system, poll prioritized files (that is,\n      // files that have been changed at least once) at a higher frequency\n      // (every 500ms by default).\n      return NO_WATCHER_POLLING_INTERVAL;\n    }\n\n    if (watcherEnabled || PRIORITIZE_CHANGED) {\n      // As long as native file watching is enabled (even if it doesn't\n      // work correctly) and the developer hasn't explicitly opted out of\n      // the file watching priority system, poll unchanged files at a\n      // lower frequency (every 5000ms by default).\n      return DEFAULT_POLLING_INTERVAL;\n    }\n\n    // If native file watching is disabled and the developer has\n    // explicitly opted out of the priority system, poll everything at the\n    // higher frequency (every 500ms by default). Note that this leads to\n    // higher idle CPU usage, so the developer may want to adjust the\n    // METEOR_WATCH_POLLING_INTERVAL_MS environment variable.\n    return NO_WATCHER_POLLING_INTERVAL;\n  }\n\n  function fire(event: string) {\n    if (event !== \"change\") {\n      // When we receive a \"delete\" or \"rename\" event, the watcher is\n      // probably not going to generate any more notifications for this\n      // file, so we close and nullify the watcher to ensure that\n      // entry.rewatch() will attempt to reestablish the watcher the next\n      // time we call safeWatcher.watch.\n      safeUnwatch();\n\n      // Make sure we don't throttle the watchFile callback after a\n      // \"delete\" or \"rename\" event, since it is now our only reliable\n      // source of file change notifications.\n      lastWatcherEventTime = 0;\n\n    } else {\n      changedPaths.add(absPath);\n      rewatch();\n    }\n\n    callbacks.forEach(cb => cb(event));\n  }\n\n  function watchWrapper(event: string) {\n    lastWatcherEventTime = Date.now();\n    fire(event);\n\n    // It's tempting to call unwatchFile(absPath, watchFileWrapper) here,\n    // but previous watcher success is no guarantee of future watcher\n    // reliability. For example, watchLibrary.watch works just fine when file\n    // changes originate from within a Vagrant VM, but changes to shared\n    // files made outside the VM are invisible to watcher, so our only\n    // hope of catching them is to continue polling.\n  }\n\n  function rewatch() {\n    if (hasPriority(absPath)) {\n      if (watcher) {\n        // Already watching; nothing to do.\n        return;\n      }\n      watcher = watchLibraryWatch(absPath, watchWrapper);\n    } else if (watcher) {\n      safeUnwatch();\n    }\n\n    // Since we're about to restart the stat-based file watcher, we don't\n    // want to miss any of its events because of the lastWatcherEventTime\n    // throttling that it attempts to do.\n    lastWatcherEventTime = 0;\n\n    // We use files.watchFile in addition to watcher.watch as a fail-safe\n    // to detect file changes even on network file systems.  However\n    // (unless the user disabled watcher or this watcher call failed), we\n    // use a relatively long default polling interval of 5000ms to save\n    // CPU cycles.\n    statWatch(absPath, getPollingInterval(), watchFileWrapper);\n  }\n\n  function watchFileWrapper(newStat: Stats, oldStat: Stats) {\n    if (newStat.ino === 0 &&\n        oldStat.ino === 0 &&\n        +newStat.mtime === +oldStat.mtime) {\n      // Node calls the watchFile listener once with bogus identical stat\n      // objects, which should not trigger a file change event.\n      return;\n    }\n\n    // If a watcher event fired in the last polling interval, ignore\n    // this event.\n    if (Date.now() - lastWatcherEventTime > getPollingInterval()) {\n      fire(\"change\");\n    }\n  }\n\n  const entry = {\n    callbacks,\n    rewatch,\n\n    release(callback: EntryCallback) {\n      if (! entries[absPath]) {\n        return;\n      }\n\n      callbacks.delete(callback);\n      if (callbacks.size > 0) {\n        return;\n      }\n\n      // Once there are no more callbacks in the Set, close both watchers\n      // and nullify the shared data.\n      if (watcherCleanupTimer) {\n        clearTimeout(watcherCleanupTimer);\n      }\n\n      watcherCleanupTimer = setTimeout(() => {\n        if (callbacks.size > 0) {\n          // If another callback was added while the timer was pending, we\n          // can avoid tearing anything down.\n          return;\n        }\n        entry.close();\n      }, WATCHER_CLEANUP_DELAY_MS);\n    },\n\n    close() {\n      if (entries[absPath] !== entry) return;\n      entries[absPath] = null;\n\n      if (watcherCleanupTimer) {\n        clearTimeout(watcherCleanupTimer);\n        watcherCleanupTimer = null;\n      }\n\n      safeUnwatch();\n\n      unwatchFile(absPath, watchFileWrapper);\n    },\n    _fire: fire\n  };\n\n  if (stat && stat.ino > 0) {\n    entriesByIno.set(stat.ino, entry);\n  }\n\n  return entry;\n}\n\nexport function closeAllWatchers() {\n  Object.keys(entries).forEach(absPath => {\n    const entry = entries[absPath];\n    if (entry) {\n      entry.close();\n    }\n  });\n}\n\nconst statWatchers = Object.create(null);\n\nfunction statWatch(\n  absPath: string,\n  interval: number,\n  callback: (current: Stats, previous: Stats) => void,\n) {\n  let statWatcher = statWatchers[absPath];\n\n  if (!statWatcher) {\n    statWatcher = {\n      interval,\n      changeListeners: [],\n      stat: null\n    };\n    statWatchers[absPath] = statWatcher;\n  }\n\n  // If the interval needs to be changed, replace the watcher.\n  // Node will only recreate the watcher with the new interval if all old\n  // watchers are stopped (which unwatchFile does when not passed a\n  // specific listener)\n  if (statWatcher.interval !== interval && statWatcher.stat) {\n    // This stops all stat watchers for the file, not just those created by\n    // statWatch\n    unwatchFile(absPath);\n    statWatcher.stat = null;\n    statWatcher.interval = interval;\n  }\n\n  if (!statWatcher.changeListeners.includes(callback)) {\n    statWatcher.changeListeners.push(callback);\n  }\n\n  if (!statWatcher.stat) {\n    const newStat = watchFile(absPath, {\n      persistent: false, // never persistent\n      interval,\n    }, (newStat, oldStat) => {\n      statWatcher.changeListeners.forEach((\n        listener: (newStat: Stats, oldStat: Stats) => void\n      ) => {\n          listener(newStat, oldStat);\n      });\n    });\n\n    newStat.on(\"stop\", () => {\n      if (statWatchers[absPath] === statWatch) {\n        delete statWatchers[absPath];\n      }\n    });\n\n    statWatcher.stat = newStat;\n  }\n\n  return statWatcher;\n}\n\nfunction watchLibraryWatch(absPath: string, callback: EntryCallback) {\n  if (watcherEnabled && watcherLibrary === 'pathwatcher') {\n    try {\n      return pathwatcher.watch(convertToOSPath(absPath), callback);\n    } catch (e) {\n      maybeSuggestRaisingWatchLimit(e);\n      // ... ignore the error.  We'll still have watchFile, which is good\n      // enough.\n    }\n  }\n\n  return null;\n}\n\nlet suggestedRaisingWatchLimit = false;\n\n// This function is async so that archinfo.host() (which may call\n// utils.execFileSync) will run in a Fiber.\nasync function maybeSuggestRaisingWatchLimit(error: Error & { errno: number }) {\n  var constants = require('constants');\n  var archinfo = require('../utils/archinfo');\n  if (! suggestedRaisingWatchLimit &&\n      // Note: the not-super-documented require('constants') maps from\n      // strings to SYSTEM errno values. System errno values aren't the same\n      // as the numbers used internally by libuv! Once we're upgraded\n      // to Node 0.12, we'll have the system errno as a string (on 'code'),\n      // but the support for that wasn't in Node 0.10's uv.\n      // See our PR https://github.com/atom/node-pathwatcher/pull/53\n      // (and make sure to read the final commit message, not the original\n      // proposed PR, which had a slightly different interface).\n      error.errno === constants.ENOSPC &&\n      // The only suggestion we currently have is for Linux.\n      archinfo.matches(archinfo.host(), 'os.linux')) {\n\n    // Check suggestedRaisingWatchLimit again because archinfo.host() may\n    // have yielded.\n    if (suggestedRaisingWatchLimit) return;\n    suggestedRaisingWatchLimit = true;\n\n    var Console = require('../console/console.js').Console;\n    if (! Console.isHeadless()) {\n      Console.arrowWarn(\n        \"It looks like a simple tweak to your system's configuration will \" +\n          \"make many tools (including this Meteor command) more efficient. \" +\n          \"To learn more, see \" +\n          Console.url(\"https://github.com/meteor/docs/blob/master/long-form/file-change-watcher-efficiency.md\"));\n    }\n  }\n}\n\nexport const watch = Profile(\n  \"safeWatcher.watch\",\n  (absPath: string, callback: EntryCallback) => {\n    const entry = acquireWatcher(absPath, callback);\n    return {\n      close() {\n        entry.release(callback);\n      }\n    } as SafeWatcher;\n  }\n);\n\nconst fireNames = {\n  [nsfw.actions.CREATED]: 'change',\n  [nsfw.actions.MODIFIED]: 'change',\n  [nsfw.actions.DELETED]: 'delete'\n}\n\nexport function addWatchRoot(absPath: string) {\n  if (watchRoots.has(absPath) || watcherLibrary !== 'nsfw' || !watcherEnabled) {\n    return;\n  }\n\n  watchRoots.add(absPath);\n  \n  // If there already is a watcher for a parent directory, there is no need\n  // to create this watcher.\n  for (const path of watchRoots) {\n    let relativePath = pathRelative(path, absPath);\n    if (\n      path !== absPath &&\n      !relativePath.startsWith('..') &&\n      !relativePath.startsWith('/')\n    ) {\n      return;\n    }\n  }\n\n  // TODO: check if there are any existing watchers that are children of this\n  // watcher and stop them\n\n  nsfw(\n    convertToOSPath(absPath),\n    (events) => {\n      events.forEach(event => {\n        if(event.action === nsfw.actions.RENAMED) {\n          let oldPath = nativeJoin(event.directory, event.oldFile);\n          let oldEntry = entries[toPosixPath(oldPath)];\n          if (oldEntry) {\n            oldEntry._fire('rename');\n          }\n\n          let path = nativeJoin(event.newDirectory, event.newFile);\n          let newEntry = entries[toPosixPath(path)];\n          if (newEntry) {\n            newEntry._fire('change');\n          }\n        } else {\n            let path = nativeJoin(event.directory, event.file);\n            let entry = entries[toPosixPath(path)];\n            if (entry) {\n              entry._fire(fireNames[event.action]);\n            }\n        }\n      })\n    }\n  ).then(watcher => {\n    watcher.start()\n  });\n}\n"]}