{"version":3,"file":"tools/console/progress.js.map","mappings":"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","names":["module","default","_objectSpread","_defineProperty","Progress","constructor","options","Date","now","current","done","parent","watchers","forkJoin","title","toUpperCase","slice","toString","JSON","stringify","state","reportProgressDone","selfState","end","reportProgress","getCurrentProgress","isRoot","isDone","allTasks","length","active","map","task","filter","Boolean","addChildTask","child","push","reportChildState","dump","stream","prefix","skipDone","write","forEach","updateTotalState","require","Console","nudge","notifyState","addWatcher","watcher","allChildrenDone","childState","undefined","Error","getState"],"sourceRoot":"","sources":["tools/console/progress.ts"],"sourcesContent":["type ProgressWatcher = (state: ProgressState) => void;\n\ntype ProgressOptions = {\n  parent?: Progress;\n  watchers?: ProgressWatcher[];\n  title?: string;\n  forkJoin?: boolean;\n};\n\ntype ProgressState = {\n  done: boolean; // true if job is done\n  current: number; // the current progress value\n  end?: number; // the value of current where we expect to be done\n};\n\n/**\n * Utility class for computing the progress of complex tasks.\n * \n * Watchers are invoked with a ProgressState object.\n */\nexport class Progress {\n  public readonly title?: string;\n  public readonly startTime = Date.now();\n\n  private parent: Progress | null;\n  private allTasks: Progress[] = [];\n  private selfState: ProgressState = { current: 0, done: false };\n  private state: ProgressState = { current: 0, done: false };\n  private isDone = false;\n  private watchers: ProgressWatcher[];\n  private forkJoin: boolean;\n\n  constructor(options: ProgressOptions = {}) {\n    this.parent = options.parent || null;\n    this.watchers = options.watchers || [];\n    this.forkJoin = !!options.forkJoin;\n\n    if ((this.title = options.title)) {\n      // Capitalize job titles when displayed in the progress bar.\n      this.title = this.title[0].toUpperCase() + this.title.slice(1);\n    }\n  }\n\n  toString() {\n    return \"Progress [state=\" + JSON.stringify(this.state) + \"]\";\n  }\n\n  reportProgressDone() {\n    const state = {\n      ...this.selfState,\n      done: true,\n    };\n\n    if (typeof state.end !== 'undefined') {\n      if (state.current > state.end) {\n        state.end = state.current;\n      }\n      state.current = state.end;\n    }\n\n    this.reportProgress(state);\n  }\n\n  // Tries to determine which is the 'current' job in the tree\n  // This is very heuristical... we use some hints, like:\n  // don't descend into fork-join jobs; we know these execute concurrently,\n  // so we assume the top-level task has the title\n  // i.e. \"Downloading packages\", not \"downloading supercool-1.0\"\n  getCurrentProgress(): Progress | null {\n    const isRoot = !this.parent;\n\n    if (this.isDone) {\n      // A done task cannot be the active task\n      return null;\n    }\n\n    if (!this.state.done && (this.state.current !== 0) && this.state.end &&\n        !isRoot) {\n      // We are not done and we have interesting state to report\n      return this;\n    }\n\n    if (this.forkJoin) {\n      // Don't descend into fork-join tasks (by choice)\n      return this;\n    }\n\n    if (this.allTasks.length) {\n      const active = this.allTasks\n        .map(task => task.getCurrentProgress())\n        .filter(Boolean);\n\n      if (active.length) {\n        // pick one to display, somewhat arbitrarily\n        return active[active.length - 1];\n      }\n\n      // No single active task, return self\n      return this;\n    }\n\n    return this;\n  }\n\n  // Creates a subtask that must be completed as part of this (bigger) task\n  addChildTask(options: ProgressOptions) {\n    options = {\n      parent: this,\n      ...options,\n    };\n    const child = new Progress(options);\n    this.allTasks.push(child);\n    this.reportChildState();\n    return child;\n  }\n\n  // Dumps the tree, for debug\n  dump(\n    stream: NodeJS.WriteStream,\n    options?: { skipDone: boolean },\n    prefix?: string,\n  ) {\n    if (options && options.skipDone && this.isDone) {\n      return;\n    }\n\n    if (prefix) {\n      stream.write(prefix);\n    }\n    const end = this.state.end || '?';\n    stream.write(\"Task [\" + this.title + \"] \" + this.state.current + \"/\" + end\n      + (this.isDone ? \" done\" : \"\") +\"\\n\");\n    if (this.allTasks.length) {\n      this.allTasks.forEach(child => {\n        child.dump(stream, options, (prefix || '') + '  ');\n      });\n    }\n  }\n\n  // Receives a state report indicating progress of self\n  reportProgress(state: ProgressState) {\n    this.selfState = state;\n\n    this.updateTotalState();\n\n    // Nudge the spinner/progress bar, but don't yield (might not be safe to yield)\n    require('./console.js').Console.nudge(false);\n\n    this.notifyState();\n  }\n\n  // Subscribes a watcher to changes\n  addWatcher(watcher: ProgressWatcher) {\n    this.watchers.push(watcher);\n  }\n\n  // Notifies watchers & parents\n  private notifyState() {\n    if (this.parent) {\n      this.parent.reportChildState();\n    }\n\n    if (this.watchers.length) {\n      this.watchers.forEach(watcher => {\n        watcher(this.state);\n      });\n    }\n  }\n\n  // Recomputes state, incorporating children's states\n  private updateTotalState() {\n    let allChildrenDone = true;\n    const state = { ...this.selfState };\n    this.allTasks.forEach(child => {\n      const childState = child.state;\n\n      if (!child.isDone) {\n        allChildrenDone = false;\n      }\n\n      state.current += childState.current;\n      if (state.end !== undefined) {\n        if (childState.done) {\n          state.end += childState.current;\n        } else if (childState.end !== undefined) {\n          state.end += childState.end;\n        } else {\n          state.end = undefined;\n        }\n      }\n    });\n\n    this.isDone = allChildrenDone && !!this.selfState.done;\n    if (!allChildrenDone) {\n      state.done = false;\n    }\n\n    if (!state.done && this.state.done) {\n      // This shouldn't happen\n      throw new Error(\"Progress transition from done => !done\");\n    }\n\n    this.state = state;\n  }\n\n  // Called by a child when its state changes\n  private reportChildState() {\n    this.updateTotalState();\n    this.notifyState();\n  }\n\n  getState() {\n    return this.state;\n  }\n}\n"]}