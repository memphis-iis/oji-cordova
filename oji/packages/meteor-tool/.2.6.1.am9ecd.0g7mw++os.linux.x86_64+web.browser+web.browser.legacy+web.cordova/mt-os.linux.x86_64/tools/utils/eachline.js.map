{"version":3,"file":"tools/utils/eachline.js.map","mappings":"AAAAA,MAAM,OAAN,CAAc;AAAAC,UAAQ,gBAAR;AAAkBC;AAAlB,CAAd;AAAgC;AAAAF;AAAAG;AAAAA;AAAA;;AAAA;;AAAhC,MAAMC,KAAK,GAAGC,OAAO,CAAC,QAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAApB;;AAMM,SAAUJ,QAAV,CAAmBM,MAAnB,EAAmCC,QAAnC,EAA4D;AAChED,QAAM,CAACD,IAAP,CAAYJ,SAAS,CAACM,QAAD,CAArB;AACD;;AAEK,SAAUN,SAAV,CAAoBM,QAApB,EAA6C;AACjD,QAAMC,WAAW,GAAGL,KAAK,CAAC,OAAD,EAAU,IAAV,EAAgB;AACvCM,YAAQ,EAAE;AAD6B,GAAhB,CAAzB;AAIA,QAAMR,SAAS,GAAG,IAAIC,SAAJ,EAAlB;;AAEAD,WAAS,CAACS,UAAV,GAAuB,UAAgBC,KAAhB,EAAuBC,SAAvB,EAAkCC,IAAlC;AAAA,oCAAsC;AAC3D,UAAIC,IAAI,GAAGH,KAAK,CAACI,QAAN,CAAe,MAAf,CAAX;;AACA,UAAI;AACFD,YAAI,iBAASP,QAAQ,CAACO,IAAD,CAAjB,CAAJ;AACD,OAFD,CAEE,OAAOE,KAAP,EAAc;AACdH,YAAI,CAACG,KAAD,CAAJ;AACA;AACD;;AACDH,UAAI,CAAC,IAAD,EAAOC,IAAP,CAAJ;AACD,KATsB;AAAA,GAAvB;;AAWA,SAAOT,IAAI,CACTG,WADS,EAETP,SAFS,CAAX;AAID","names":["module","eachline","transform","Transform","split","require","pipe","stream","callback","splitStream","trailing","_transform","chunk","_encoding","done","line","toString","error"],"sourceRoot":"","sources":["tools/utils/eachline.ts"],"sourcesContent":["const split = require(\"split2\");\nconst pipe = require(\"multipipe\");\n\nimport { Transform, Stream } from \"stream\";\n\ntype LineTransformer = (line: string) => string | Promise<string>\n\nexport function eachline(stream: Stream, callback: LineTransformer) {\n  stream.pipe(transform(callback));\n}\n\nexport function transform(callback: LineTransformer) {\n  const splitStream = split(/\\r?\\n/, null, {\n    trailing: false\n  });\n\n  const transform = new Transform();\n\n  transform._transform = async function (chunk, _encoding, done) {\n    let line = chunk.toString(\"utf8\");\n    try {\n      line = await callback(line);\n    } catch (error) {\n      done(error);\n      return;\n    }\n    done(null, line);\n  };\n\n  return pipe(\n    splitStream,\n    transform,\n  );\n}\n"]}